topic:
  Gausian-blur (reduces blur on the image, hence smoothen out the image) cv2.GausianBlur(image name**,(boxRow&Col**eg.5,5), deviation)
	blur = cv2.GaussianBlur(gray,(5,5),0)
    - kernal-convolustion (to study)

  Canny()
    - An image is made up of pixels, hence its a matrix of pixels set in X and Y axis. It consists of Matrix of pixels with different color intensity.

    - So, Canny is a function that determines the rapid changes in pixel matrix of an image (frame).
    This will perform derivative on our function in both x and y directions. (there by measuring the change in intensity with respect to adjecant pixel.(small derivative is small change and vice versa.))
    derivative(f(x,y)) = so we are computing gradients here.
    usage:
    cv2.Canny(image, low_threshold, high_threshold)
    *it will show pixels exceeding high threshold and for those attached to high thresh and between high and low thresh will be accepted 1-2, or 2-3 ratio is preferred. hence 50, 150 (1-3)

    [0 0 255 255  0 -> 255 high change row-direction
     0 0 255 255  0 ^ 0    low change col-direction
     0 0 255 255
     0 0 255 255
    ]
  (applied on blurred (smoothend) image*)
  canny = cv2.Canny(image,50,150)

matplotlib.pyplot
-> gives us the image with x and y axis range


np.array([[(x,y),(x,y),(x,y)]]) +accepts multiple polygons too,  three points (x,y),(x,y),(x,y) to make triangle
(with its help we can isolate the coordinates [in triangle form] of interest,)
we will display this on black masked image first ... cv2.zero_like()

Then we will use bitwiseAnd() 0peration to compare the canny image with masked image to display only triangle part of image.





